@page "/weather"
@rendermode InteractiveAuto
@using MudblazorNet8.Client.Components

<MyMudProviders />

<PageTitle>Weather</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>

@if (forecasts == null || isLoading)
{
    <MudStack Row=true>
        <MudProgressCircular Color="Color.Default" Indeterminate=@isLoading />
        <MudText>Loading ...</MudText>
    </MudStack>
}
else
{
    <MudTable Items="forecasts" Hover="true" SortLabel="Sort By" Elevation="0" RowsPerPage="10" Loading=@isLoading>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<WeatherForecast, object>(x=>x.Date)">Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.TemperatureC)">Temp. (C)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.TemperatureF)">Temp. (F)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.Summary!)">Summary</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.Date</MudTd>
            <MudTd DataLabel="Temp. (C)">@context.TemperatureC</MudTd>
            <MudTd DataLabel="Temp. (F)">@context.TemperatureF</MudTd>
            <MudTd DataLabel="Summary">@context.Summary</MudTd>
        </RowTemplate>
		<ToolBarContent>
			@if (!isLoading)
			{
				<MudText Typo="Typo.h6" GutterBottom="true">Items: (@forecasts?.Count)</MudText>
			}
			<MudSpacer />
			<MudButton Disabled="@isLoading" OnClick="@RefreshAsync"
						Color="Color.Primary"
						Size="@Size.Small"
						Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh">Refresh</MudButton>
			<MudSpacer />
		</ToolBarContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{ 10, 50, 100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private List<WeatherForecast>? forecasts;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    protected async Task RefreshAsync()
    {
        await LoadAsync();
    }

    protected async Task LoadAsync()
    {
        forecasts = null;
        isLoading = true;
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(1500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 500).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToList();

        isLoading = false;
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
