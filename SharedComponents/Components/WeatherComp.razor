<MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>

@if (isLoading)
{
    <MudStack Row=true>
        <MudProgressCircular Color="Color.Primary" Indeterminate=@isLoading />
        <MudText>Loading ...</MudText>
    </MudStack>
}
<MudTable Items="forecasts" Dense=true Hover="true" SortLabel="Sort By" Elevation="1" RowsPerPage="10" Loading=@isLoading>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<WeatherForecast, object>(x=>x.Date)">Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.TemperatureC)">Temp. (C)</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.TemperatureF)">Temp. (F)</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.Summary!)">Summary</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Date">@context.Date</MudTd>
        <MudTd DataLabel="Temp. (C)">@context.TemperatureC</MudTd>
        <MudTd DataLabel="Temp. (F)">@context.TemperatureF</MudTd>
        <MudTd DataLabel="Summary">@context.Summary</MudTd>
    </RowTemplate>
	<ToolBarContent>
		@if (!isLoading)
		{
			<MudText Typo="Typo.h6" Color=Color.Primary GutterBottom="true">Items: (@forecasts?.Count)</MudText>
		}
		<MudSpacer />
		<MudButton Disabled="@isLoading" 
            OnClick="@RefreshAsync"
            Color="Color.Primary"
            Size="@Size.Small"
            Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh">Refresh
        </MudButton>
		<MudSpacer />
        <MudNumericField 
            @bind-Value="itemsToShow" @bind-Value:after="LoadAsync"
            Label="# of Items To Show/Load" Variant="Variant.Text" Clearable=true 
            Immediate=true DebounceInterval="900"
            Disabled=@isLoading Min="50" Max="10000" />
        <MudSpacer />
	</ToolBarContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{ 10, 50, 100, 1000 }" />
    </PagerContent>
</MudTable>


@code {
    private List<WeatherForecast>? forecasts = new();
    protected bool isLoading = false;
    protected int itemsToShow = 500;

    protected override async Task OnInitializedAsync() => await LoadAsync();    

    protected async Task RefreshAsync() => await LoadAsync();    

    protected async Task LoadAsync()
    {
        forecasts = new();
        isLoading = true;
        StateHasChanged(); // Not always needed, but it's a good practice to call this method after changing the state of the component
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(itemsToShow);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, itemsToShow).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToList();

        isLoading = false;
        StateHasChanged(); // Not always needed, but it's a good practice to call this method after changing the state of the component
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
